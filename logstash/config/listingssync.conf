input {
  jdbc {
      #  jdbc_validate_connection => true
      jdbc_connection_string => "jdbc:postgresql://postgres:5432/strapi"
      jdbc_user => "strapi"
      jdbc_password => "strapi"
      jdbc_driver_class => "org.postgresql.Driver"
      jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.14.jar"
      schedule => "* * * * *"
      statement => "select* from (SELECT _listings.id, title, description, longitude, latitude, username,_listings.created_at, \"isPublished\", \"users-permissions_user\".\"firstName\",\"lastName\",email FROM
      (SELECT listings.id as id, title, description, longitude, latitude, \"user\",listings.created_at as created_at, \"isPublished\" FROM listings
      JOIN components_location_geo_coordinates
          ON listings.id = components_location_geo_coordinates.id) AS _listings
      JOIN \"users-permissions_user\" ON _listings.user = \"users-permissions_user\".id) as listing_full join (select url, related_id as listing_id from upload_file join
(select upload_file_id, related_id
    from upload_file_morph
        where related_type='listings' AND \"order\"=1) as morph on upload_file_id=upload_file.id) as listing_images on listing_images.listing_id=id"
    }
}
filter {
	if [latitude] and [longitude] {
      json_encode {
        source => "message"
        add_field => { "[location]" => "%{latitude},%{longitude}" }
        # remove_field => [ "longitude" ]
        # remove_field => [ "latitude" ]
        source => "message"
      }
	}
}
output {
#   elasticsearch {
#     hosts => ["http://elasticsearch:9200"]
#     index => "users"
#     document_id => "users_%{id}"
#     doc_as_upsert => true
#     #user => "es_user”
#     #password => "es_password”
#  }
#   stdout { codec => json }
  elastic_app_search{
    url => "http://appsearch:3002"
    api_key => "private-17cnfdzo96o93s3h4mo55zu3"
    engine => "listings"
    document_id => "listing_%{id}"
    # patb => "/api/as/v1/engines/users/documents"
  }
}